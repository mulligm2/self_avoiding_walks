# -*- coding: utf-8 -*-
"""
LRegression Length Scale
"""


import csv
import matplotlib.pyplot as plt
import numpy as np

#Set variable to point to experiment data csv file generated by length_scaling_coeff.cpp 
input_data_file = "..\input_data\example_2.csv"
file = open(input_data_file, "r")
data = list(csv.reader(file, delimiter=","))
file.close()

x_vals = ([float(row[0]) for row in data])
y_vals = ([float(row[1]) for row in data])

#Connective Constant Values
x = np.array([1,4,12,36,100,284,780,2172,5916,16268,44100,120292,324932,881500,2374444,6416696,17245230,30465640,54654820])
y = np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])

#Connective Constant 
x_log = np.log(x)


#Length Scaling 
x_xal_log = np.array(np.log(x_vals))
y_xal_log = np.array(np.log(y_vals))


# y = b1x + b 

# nu = b1 / 2 

def estimate_coefficients(x, y):
  # number of observations/points
  n = np.size(x)
 
  # mean of x and y vector
  m_x = np.mean(x)
  m_y = np.mean(y)
 
  # calculating cross-deviation and deviation about x
  SS_xy = np.sum(y*x) - n*m_y*m_x
  SS_xx = np.sum(x*x) - n*m_x*m_x
 
  # calculating regression coefficients
  b_1 = SS_xy / SS_xx
  b_0 = m_y - b_1*m_x
 
  return (b_0, b_1)
  
b = estimate_coefficients(x_xal_log, y_xal_log)
#print(b)

def plot_regression_line(x, y, b):
  # plotting the actual points as scatter plot
  plt.scatter(x, y, color = "m",
        marker = "o", s = 5)
 
  # predicted response vector
  y_pred = b[0] + b[1]*x
 
  # plotting the regression line
  plt.plot(x, y_pred, color = "b")
  sumation = 0
  #mean square error
  for i in range(len(y_pred)):
      sumation += (y[i]-y_pred[i])**2
  
  print("Error")
  print(sumation/len(y_pred))
  # putting labels
  
  #plt.title("Avg Distance per Step Count")
  plt.xlabel("log(n)")
  plt.ylabel("log(|w(n)|^2)")
  resolution_value = 1200
  save_name = "LinearRegressionScalingExponent2D.pdf"
  #plt.savefig(save_name, format="pdf", dpi=resolution_value)
  plt.show()

plot_regression_line(x_xal_log, y_xal_log, b)

print("Length Scaling Coefficient")
print(b[1]/2)
print("Fractal Dimension")
print(2/b[1])


